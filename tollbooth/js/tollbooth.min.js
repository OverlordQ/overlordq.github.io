'use strict';
!function(modules) {
  /**
   * @param {number} moduleId
   * @return {?}
   */
  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) {
      return installedModules[moduleId].exports;
    }
    var module = installedModules[moduleId] = {
      i : moduleId,
      l : false,
      exports : {}
    };
    return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.l = true, module.exports;
  }
  var installedModules = {};
  /** @type {!Array} */
  __webpack_require__.m = modules;
  __webpack_require__.c = installedModules;
  /**
   * @param {!Function} exports
   * @param {string} name
   * @param {!Function} n
   * @return {undefined}
   */
  __webpack_require__.d = function(exports, name, n) {
    if (!__webpack_require__.o(exports, name)) {
      Object.defineProperty(exports, name, {
        configurable : false,
        enumerable : true,
        get : n
      });
    }
  };
  /**
   * @param {?} x
   * @return {undefined}
   */
  __webpack_require__.r = function(x) {
    Object.defineProperty(x, "__esModule", {
      value : true
    });
  };
  /**
   * @param {!Object} module
   * @return {?}
   */
  __webpack_require__.n = function(module) {
    /** @type {function(): ?} */
    var n = module && module.__esModule ? function() {
      return module.default;
    } : function() {
      return module;
    };
    return __webpack_require__.d(n, "a", n), n;
  };
  /**
   * @param {!Function} object
   * @param {string} name
   * @return {?}
   */
  __webpack_require__.o = function(object, name) {
    return Object.prototype.hasOwnProperty.call(object, name);
  };
  /** @type {string} */
  __webpack_require__.p = "/public/";
  __webpack_require__(__webpack_require__.s = 2);
}([function(canCreateDiscussions, isSlidingUp, n) {
  /**
   * @param {string} session
   * @return {?}
   */
  function readFile(session) {
    return session.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  /**
   * @param {?} elm
   * @param {boolean} alignToTop
   * @return {undefined}
   */
  function addPassMaskFn(elm, alignToTop) {
    let value = 0;
    let currency = "";
    let max = 0;
    if (alignToTop) {
      /** @type {string} */
      currency = "BCH";
      /** @type {number} */
      value = parseInt(imageBinary.textContent.replace(/,/g, ""));
      max = elm.nTx;
    } else {
      /** @type {string} */
      currency = "BTC";
      let t = (value = parseInt(xorEl.textContent.replace(/,/g, ""))) / (max = elm.nTx) / 100;
      /** @type {number} */
      endRho = t >= .8 ? .2 : 1 - t;
    }
    if (alignToTop && !thenTrivial) {
      play(response);
    }
    if (!(alignToTop || adjustHeight)) {
      play(response);
    }
    /** @type {string} */
    cell.textContent = max + "x " + currency;
    /** @type {string} */
    boxChild.style.display = "block";
    setTimeout(() => {
      /** @type {string} */
      boxChild.style.display = "none";
    }, 4e3);
  }
  /**
   * @return {undefined}
   */
  function updateFullScreen() {
    /** @type {number} */
    height = window.innerHeight * pr;
    /** @type {number} */
    width = window.innerWidth;
    /** @type {number} */
    size = height / viewportHeight;
    /** @type {number} */
    cos = width / 240;
    /** @type {number} */
    canvas.width = width;
    /** @type {number} */
    canvas.height = height;
  }
  /**
   * @param {boolean} a
   * @param {!Object} b
   * @return {undefined}
   */
  function update(a, b) {
    if (a) {
      let n = false;
      if (to.forEach((a) => {
        if (a.id == b.hash) {
          /** @type {boolean} */
          n = true;
        }
      }), n) {
        return;
      }
      if ("UPDATING" != imageBinary.textContent) {
        let name = parseInt(imageBinary.textContent.replace(/,/g, ""));
        imageBinary.textContent = readFile(name + 1);
      }
      const up = b.lane + buttonHeight;
      if (b.memos.length >= 1) {
        console.log(b.memos);
      }
      if (b.yours) {
        console.log("Yours.org TX");
      }
      move(a, to, b, up, true);
    } else {
      let n = false;
      if (item.forEach((a) => {
        if (a.id == b.hash) {
          /** @type {boolean} */
          n = true;
        }
      }), n) {
        return;
      }
      if ("UPDATING" != xorEl.textContent) {
        let name = parseInt(xorEl.textContent.replace(/,/g, ""));
        xorEl.textContent = readFile(name + 1);
      }
      move(a, item, b, up, false);
    }
  }
  /**
   * @param {boolean} ang
   * @param {?} v
   * @param {!Object} data
   * @param {!Node} type
   * @param {string} col
   * @return {undefined}
   */
  function move(ang, v, data, type, col) {
    let donation = data.donation;
    let verticalrailid = redraw(data, col);
    let nameArgs = data.fee;
    let off = data.valOut;
    if (0 != nameArgs) {
      (function(uCol, t) {
        if (uCol) {
          if (t = t * x, 100 == array.length && array.splice(0, 1), array.push(t), 1 == array.length) {
            return;
          }
          let sum = 0;
          /** @type {number} */
          var i = 0;
          for (; i < array.length; i++) {
            sum = sum + array[i];
          }
          let drLen = sum / array.length;
          /** @type {string} */
          var a = parseFloat(drLen).toFixed(4);
          /** @type {boolean} */
          var d = isNaN(a);
          /** @type {string} */
          document.getElementById("fees-bch").textContent = d ? "~ $0.01" : "$" + a;
        } else {
          if (t = t * k, 100 == arr.length && arr.splice(0, 1), arr.push(t), 1 == arr.length) {
            return;
          }
          let sum = 0;
          /** @type {number} */
          i = 0;
          for (; i < arr.length; i++) {
            sum = sum + arr[i];
          }
          let drLen = sum / arr.length;
          /** @type {string} */
          document.getElementById("fees-btc").textContent = "$" + parseFloat(drLen).toFixed(2);
        }
      })(col, nameArgs);
    }
    if (data.valueOut) {
      off = data.valueOut;
    }
    let screenUtil = function(step, donation, relative, s, i, a, isSlidingUp, dontForceConstraints) {
      if (donation) {
        return ret;
      }
      if (a) {
        return url;
      }
      if (i) {
        return variable;
      }
      if (s) {
        return relative ? c : overlay;
      }
      if (isSlidingUp) {
        return target;
      }
      if (dontForceConstraints) {
        return result;
      }
      let r = 0;
      /** @type {number} */
      r = relative ? step * x : step * k;
      if (r <= ratio) {
        return relative ? s : C;
      }
      if (r > ratio && r <= pixelRatio) {
        return relative ? v : A;
      }
      if (r > pixelRatio && r <= midrow) {
        return relative ? directory : v2;
      }
      if (r > midrow && r <= midcolumn) {
        return relative ? l : radius;
      }
      if (r > midcolumn && r <= rmax) {
        return relative ? t : Q;
      }
      if (r > rmax && r <= rMax) {
        return relative ? f : V;
      }
      if (r > rMax) {
        return relative ? a : H;
      }
    }(off, donation, col, verticalrailid, data.bones, data.sw, data.yours, data.jeepney);
    let x = size * (screenUtil.width / screenUtil.height);
    let Xmain = -x;
    let msg_obj = "";
    if (void 0 !== data.memos && data.memos.length >= 1) {
      msg_obj = data.memos[0];
    }
    if (v.length > 0) {
      v.forEach((data) => {
        if (x >= data.x && type == data.lane) {
          let Xylabel = 20;
          if ("" !== data.message) {
            Xylabel = Xylabel + (ctx.measureText(data.message).width + 20);
          }
          /** @type {number} */
          Xmain = data.x - x - Xylabel;
        }
      });
    }
    let backupNode = {
      id : data.hash,
      car : screenUtil,
      x : Xmain,
      lane : type,
      h : size,
      w : x,
      valueOut : off,
      donation : donation,
      userTx : verticalrailid,
      isCash : col,
      message : msg_obj
    };
    v.push(backupNode);
  }
  /**
   * @param {string} value
   * @return {undefined}
   */
  function play(value) {
    let node = audioContext.createBufferSource();
    let sourceNode = audioContext.createGain();
    /** @type {string} */
    node.buffer = value;
    let currentFreq = excEditor.value / 100 + .5;
    node.playbackRate.setValueAtTime(currentFreq, 0);
    node.connect(sourceNode);
    sourceNode.connect(gainNode);
    /**
     * @return {undefined}
     */
    node.onended = () => {
      sourceNode.disconnect();
      node.disconnect();
    };
    node.start(0);
  }
  /**
   * @param {string} callback
   * @param {string} key
   * @return {undefined}
   */
  function requestAudioFile(callback, key) {
    let request = new XMLHttpRequest;
    request.open("GET", callback, true);
    /** @type {string} */
    request.responseType = "arraybuffer";
    /**
     * @return {undefined}
     */
    request.onload = function() {
      audioContext.decodeAudioData(request.response, function(value) {
        if ("motorcycle" == key) {
          /** @type {string} */
          d2 = value;
        } else {
          if ("car" == key) {
            /** @type {string} */
            info = value;
          } else {
            if ("diesel" == key) {
              /** @type {string} */
              node = value;
            } else {
              if ("semi" == key) {
                /** @type {string} */
                p = value;
              } else {
                if ("mercy" == key) {
                  /** @type {string} */
                  tmp_a = value;
                } else {
                  if ("lilWindex" == key) {
                    /** @type {string} */
                    tmp_c = value;
                  } else {
                    if ("ride" == key) {
                      /** @type {string} */
                      tmp_b = value;
                    } else {
                      if ("cha-ching" == key) {
                        /** @type {string} */
                        response = value;
                      } else {
                        if ("la-cucaracha" == key) {
                          /** @type {string} */
                          d1 = value;
                        } else {
                          if ("spam" == key) {
                            /** @type {string} */
                            i = value;
                          } else {
                            if ("allspam" == key) {
                              /** @type {string} */
                              id = value;
                            } else {
                              if ("laugh" == key) {
                                /** @type {string} */
                                state = value;
                              } else {
                                if ("horns" == key) {
                                  /** @type {string} */
                                  (sourceNode = audioContext.createBufferSource()).buffer = value;
                                  sourceNode.start(0);
                                } else {
                                  if ("birds" == key) {
                                    /** @type {string} */
                                    buf = value;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      });
    };
    request.send();
  }
  /**
   * @param {!Array} position
   * @return {undefined}
   */
  function init(position) {
    let orig = null;
    let y = null;
    let w = null;
    let i = 0;
    let screenSmallerThanEditor = true;
    position.forEach(function(options, canCreateDiscussions, isSlidingUp) {
      let maxx = -(orig = !options.isCash && val ? object : options.car).width - cos;
      if (options.isCash || (maxx = -orig.width - cos * endRho), options.x > maxx) {
        if (options.isPlaying || (!function(canCreateDiscussions, href, pingErr, to, val) {
          let select = document.createElement("LI");
          let a = document.createElement("A");
          let txtContents = "txid: " + href.substring(0, 7) + "...\n";
          txtContents = txtContents + ("value: " + pingErr.toString().substring(0, 9) + "\n");
          if ("" !== val) {
            /** @type {string} */
            txtContents = txtContents + ("memo: " + val.substring(0, 7) + "...");
          }
          let titleBdi = document.createTextNode(txtContents);
          a.setAttribute("target", "_blank");
          select.setAttribute("style", "background-image: url(" + to.src + ");");
          if (canCreateDiscussions) {
            /** @type {string} */
            select.className = "txinfo-cash";
            a.setAttribute("href", "https://bch.btc.com/" + href);
          } else {
            /** @type {string} */
            select.className = "txinfo-core";
            a.setAttribute("href", "https://btc.com/" + href);
          }
          a.appendChild(titleBdi);
          select.appendChild(a);
          popupEl.insertBefore(select, popupEl.firstChild);
          if (popupEl.childNodes.length > 50) {
            popupEl.removeChild(popupEl.childNodes[popupEl.childNodes.length - 1]);
          }
        }(options.isCash, options.id, options.valueOut, orig, options.message), (options.isCash && !thenTrivial || !options.isCash && !adjustHeight) && function(type) {
          if (type != c && type != overlay || play(d1), type == variable && play(state), type == ret) {
            let r_step = Math.floor(3 * Math.random()) + 1;
            play(1 == r_step ? tmp_a : 2 == r_step ? tmp_b : tmp_c);
          }
          if (type == s || type == C) {
            play(d2);
          } else {
            if (type == s || type == C || type == v || type == A || type == directory || type == v2) {
              play(info);
            } else {
              if (type == l || type == radius || type == t || type == Q || type == f || type == V) {
                /** @type {number} */
                node.playbackRate = 1.4;
                play(node);
              } else {
                if (type == a || type == H) {
                  /** @type {number} */
                  p.playbackRate = 1.8;
                  play(p);
                } else {
                  if (type == object) {
                    play(i);
                  }
                }
              }
            }
          }
        }(orig), "" !== options.message && OPEN && play(buf)), options.isPlaying = true, y = options.lane * size - size, w = size * (orig.width / orig.height), options.car == url) {
          if (!options.y) {
            /** @type {number} */
            options.y = 0;
          }
          if (!options.d) {
            /** @type {number} */
            options.d = .3;
          }
          let height = size * (options.lane - 1) - size / 4;
          let yMax = size * (options.lane - 1) + size / 4;
          if (y + options.y > yMax) {
            /** @type {number} */
            options.d = -.3;
          }
          if (y + options.y < height) {
            /** @type {number} */
            options.d = .3;
          }
          options.y += options.d * scaleY;
          y = y + options.y;
        }
        if (OPEN && options.isCash && "" != options.message) {
          const w = ctx.measureText(options.message).width + 20;
          const cy = y + size / 2;
          const x = options.x - w;
          const o = size - 12;
          /** @type {string} */
          ctx.font = "bold " + o + "px lato";
          /** @type {string} */
          ctx.textBaseline = "middle";
          /** @type {string} */
          ctx.fillStyle = "#fff";
          ctx.fillRect(x - 10, cy - size / 2 + 2, w, size - 4);
          /** @type {string} */
          ctx.fillStyle = "#000";
          ctx.fillText(options.message, x, cy);
        }
        ctx.drawImage(orig, options.x, y, w, size);
      } else {
        if (!options.isCash) {
          i = i + 1;
        }
      }
      if (options.isCash) {
        options.x += cos * scaleY;
      } else {
        let dy = cos * endRho;
        options.x += dy * scaleY;
        /** @type {boolean} */
        screenSmallerThanEditor = false;
      }
    });
    if (!screenSmallerThanEditor) {
      w.textContent = i;
    }
    if (!(!sourceNode || screenSmallerThanEditor || adjustHeight)) {
      if (i > 5 && !start) {
        /** @type {boolean} */
        sourceNode.loop = true;
        sourceNode.connect(gainNode);
        /** @type {boolean} */
        start = true;
        /** @type {string} */
        document.getElementById("waiting-sign").style.display = "block";
      } else {
        if (0 == i && 1 == sourceNode.loop) {
          /** @type {boolean} */
          start = false;
          /** @type {boolean} */
          sourceNode.loop = false;
          sourceNode.disconnect();
          /** @type {string} */
          document.getElementById("waiting-sign").style.display = "none";
        }
      }
    }
  }
  /**
   * @return {undefined}
   */
  function refresh() {
    let curr = (new Date).getTime();
    /** @type {number} */
    scaleY = curr - (prevTime || curr);
    /** @type {number} */
    scaleY = scaleY / (1E3 / 60);
    prevTime = curr;
    ctx.clearRect(0, 0, width, height);
    init(to);
    init(item);
    init(scrollbarIdx);
    to.forEach(function(self, t, n) {
      let margin = 100;
      if ("" !== self.message) {
        margin = margin + (ctx.measureText(self.message).width + 100);
      }
      if (self.x > width + margin) {
        n.splice(t, 1);
      }
    });
    item.forEach(function(fish, t, n) {
      if (fish.x > width + 100) {
        n.splice(t, 1);
      }
    });
    if (Ie) {
      /** @type {number} */
      timer = requestAnimationFrame(refresh);
    } else {
      setTimeout(() => {
        refresh();
      }, 1E3);
    }
  }
  /**
   * @return {undefined}
   */
  function stopTransmitter() {
    if (adjustHeight) {
      /** @type {boolean} */
      adjustHeight = false;
    } else {
      sourceNode.disconnect();
      /** @type {boolean} */
      adjustHeight = true;
      /** @type {boolean} */
      start = false;
    }
  }
  /**
   * @param {string} s
   * @param {boolean} d
   * @return {undefined}
   */
  function callback(s, d) {
    /** @type {string} */
    document.getElementById(s).style.display = d ? "block" : "none";
  }
  const layer = io("https://txhighway.com/");
  const canvas = document.getElementById("renderCanvas");
  const ctx = canvas.getContext("2d");
  const imageBinary = document.getElementById("cash-pool");
  const xorEl = document.getElementById("core-pool");
  const discussionLink = (document.getElementById("cash-eta"), document.getElementById("core-eta"));
  const boxChild = document.getElementById("confirmed-notify");
  const cell = document.getElementById("confirmed-amount");
  const nextGroup = document.getElementById("cash-address-input");
  const refValue = document.getElementById("core-address-input");
  const excEditor = document.getElementById("speedSlider");
  const beatmap = document.getElementById("volumeSlider");
  const scrollbar_track = (document.getElementById("page"), document.getElementById("tx-wrap"));
  const popupEl = document.getElementById("transactions");
  const w = document.getElementById("tx-waiting");
  const b = document.getElementById("donationGoal");
  const s = (new Image, new Image);
  const v = new Image;
  const directory = new Image;
  const l = new Image;
  const t = new Image;
  const f = new Image;
  const a = new Image;
  const c = new Image;
  const C = new Image;
  const A = new Image;
  const v2 = new Image;
  const radius = new Image;
  const Q = new Image;
  const V = new Image;
  const H = new Image;
  const overlay = new Image;
  const ret = new Image;
  const object = new Image;
  const variable = new Image;
  const url = new Image;
  const target = new Image;
  const result = new Image;
  let audioContext = null;
  let gainNode = null;
  let d2 = null;
  let info = null;
  let node = null;
  let p = null;
  let tmp_a = null;
  let tmp_b = null;
  let tmp_c = null;
  let response = null;
  let d1 = null;
  let i = null;
  let id = null;
  let sourceNode = null;
  let state = null;
  let buf = null;
  let width = null;
  let height = null;
  let viewportHeight = 40;
  let buttonHeight = 3;
  let up = viewportHeight - 3;
  let size = height / viewportHeight;
  let cos = 8;
  let endRho = .5;
  let z = .5;
  let x = 0;
  let k = 0;
  let pr = 1;
  let OPEN = true;
  let ratio = 10;
  let pixelRatio = 1e3;
  let midrow = 1e4;
  let midcolumn = 1e5;
  let rmax = 5e5;
  let rMax = 1e6;
  let timer = null;
  let Ie = true;
  let val = false;
  let thenTrivial = false;
  let adjustHeight = false;
  let start = false;
  let to = [];
  let item = [];
  let scrollbarIdx = [];
  let arr = [];
  let array = [];
  layer.on("stats", function(data) {
    x = data.bchUSD;
    k = data.btcUSD;
    /** @type {string} */
    document.getElementById("price_bch").textContent = "USD $" + readFile(parseFloat(x).toFixed(2));
    /** @type {string} */
    document.getElementById("price_btc").textContent = "USD $" + readFile(parseFloat(k).toFixed(2));
    imageBinary.textContent = readFile(data.bchTX);
    xorEl.textContent = readFile(data.btcTX);
    let t = data.btcTX / 2400 / 100;
    if (.5 == endRho) {
      /** @type {number} */
      endRho = t >= .8 ? .2 : 1 - t;
    }
    let n = data.devDonations;
    /** @type {number} */
    n = n / 1e8;
    document.getElementById("donationAmt").textContent = n + " BCH";
    /** @type {string} */
    document.getElementById("donationTotal").textContent = "2 BCH";
    /** @type {number} */
    n = n / 2 * 100;
    b.setAttribute("value", n);
    discussionLink.textContent = data.btcConf;
    (function(realPrint) {
      let slideshowtimer = window.setInterval(function() {
        if (void 0 !== document.getElementsByTagName("body")[0]) {
          window.clearInterval(slideshowtimer);
          realPrint.call(this);
        }
      }, 1500);
    })(function() {
      callback("page", true);
      callback("loading", false);
      /** @type {number} */
      timer = requestAnimationFrame(refresh);
    });
  });
  layer.on("txBCH", (newState) => {
    update(true, newState);
  });
  layer.on("txBTC", (newState) => {
    update(false, newState);
  });
  layer.on("blockBCH", (editAccountPass) => {
    addPassMaskFn(editAccountPass, true);
  });
  layer.on("blockBTC", (editAccountPass) => {
    addPassMaskFn(editAccountPass, false);
  });
  let gotoNewOfflinePage = function() {
    let name;
    let t;
    let anims = {
      hidden : "visibilitychange",
      webkitHidden : "webkitvisibilitychange",
      mozHidden : "mozvisibilitychange",
      msHidden : "msvisibilitychange"
    };
    for (name in anims) {
      if (name in document) {
        t = anims[name];
        break;
      }
    }
    return function(e) {
      return e && document.addEventListener(t, e), !document[name];
    };
  }();
  gotoNewOfflinePage(function() {
    if (gotoNewOfflinePage()) {
      ctx.clearRect(0, 0, width, height);
      /** @type {boolean} */
      Ie = true;
    } else {
      ctx.clearRect(0, 0, width, height);
      /** @type {number} */
      prevTime = (new Date).getTime();
      setTimeout(() => {
        refresh();
      }, 1E3);
      /** @type {boolean} */
      Ie = false;
    }
  });
  let redraw = function(o, force) {
    let pipelets = o.out;
    let s = false;
    let after = nextGroup.value;
    if (force) {
      let m;
      let $ = bchaddr.toLegacyAddress;
      let isStringAfter = bchaddr.isLegacyAddress;
      let isHexColorAfter = bchaddr.isBitpayAddress;
      let getOption = bchaddr.isCashAddress;
      let min = bchaddr.detectAddressFormat;
      if (after.length > 0) {
        try {
          m = min(after);
        } catch (e) {
          return;
        }
        if (isStringAfter(after) || isHexColorAfter(after) || getOption(after)) {
          after = $(nextGroup.value);
        }
      }
    }
    return pipelets.forEach((value) => {
      if (!(value.addr != after && value.addr != refValue.value)) {
        /** @type {boolean} */
        s = true;
      }
    }), s;
  };
  let prevTime = 0;
  let scaleY = 0;
  /**
   * @return {undefined}
   */
  excEditor.oninput = function() {
    let cosTmp = this.value / 100 * 16;
    cos = cosTmp;
  };
  /**
   * @return {undefined}
   */
  beatmap.oninput = function() {
    let dec = this.value / 100;
    z = dec;
    gainNode.gain.setTargetAtTime(z, audioContext.currentTime, .015);
  };
  $("#tx-list-button").click(function() {
    if ("0%" == scrollbar_track.style.right) {
      /** @type {string} */
      scrollbar_track.style.right = "-151px";
    } else {
      /** @type {string} */
      scrollbar_track.style.right = "0%";
    }
  });
  $(".nav .legend").hover(function() {
    $(this).find("i").toggleClass("fa-car fa-truck");
  });
  $(".global-mute a").click(function() {
    return $(this).find("i").toggleClass("fa-volume-up fa-volume-off"), $(this).find("i").toggleClass("pulse pulse-off"), $(".cash-mute").click(), $(".core-mute").click(), false;
  });
  $("input.overlay-switch").change(function() {
    this.checked;
    $(".sign").fadeToggle("slow", "linear");
  });
  $("input.memo-switch").change(function() {
    /** @type {boolean} */
    OPEN = !OPEN;
  });
  $(".nav .search").click(function() {
    $(this).find("i").toggleClass("fa-search fa-eye");
  });
  $(".tx-list-link").click(function() {
    $(this).find("i").toggleClass("fa-list fa-close");
  });
  $(".nav .settings").hover(function() {
    $(this).find("i").toggleClass("fa-cog fa-cogs");
  });
  $(".nav .donate").hover(function() {
    $(this).find("i").toggleClass("fa-heart fa-money");
  });
  $(".nav .expand").hover(function() {
  });
  $("input.cash-mute").change(function() {
    /** @type {boolean} */
    thenTrivial = (this.checked, !thenTrivial);
  });
  $("input.core-mute").change(function() {
    this.checked;
    stopTransmitter();
  });
  $(".nav a").on("click", function() {
    $("#" + $(this).data("modal")).css("display", "block");
  });
  $(".nav a.donate").on("click", function() {
    $("#" + $(this).data("modal")).toggleClass("donate donate-off");
  });
  $(".nav a.expand").on("click", function() {
    $(this).find("i").toggleClass("fa-expand fa-compress");
    $(".title").find("h2").toggle();
    $("html").toggleClass("expanded");
    /** @type {number} */
    pr = 1 === pr ? 2 : 1;
    updateFullScreen();
  });
  $(".close").on("click", function() {
    $(".modal").hide();
  });
    /**
   * @param {!Event} event
   * @return {undefined}
   */
  window.onclick = function(event) {
    if ($(event.target).hasClass("modal")) {
      $(".modal").hide();
    }
  };
  document.querySelector("body").addEventListener("click", function() {
    audioContext.resume();
  });
  (function() {
    if (canvas.width = window.innerWidth, canvas.height = window.innerHeight, window.addEventListener("load", updateFullScreen, false), window.addEventListener("resize", updateFullScreen, false), s.src = "assets/sprites/bch-micro.png", v.src = "assets/sprites/bch-small.png", directory.src = "assets/sprites/bch-small-med.png", l.src = "assets/sprites/bch-medium.png", t.src = "assets/sprites/bch-large.png", f.src = "assets/sprites/bch-xlarge.png", a.src = "assets/sprites/bch-whale.png", c.src = "assets/sprites/tx-taxi.png", 
    ret.src = "assets/sprites/lambo.png", variable.src = "assets/sprites/bones.png", target.src = "assets/sprites/yours.png", result.src = "assets/sprites/jeepney.png", C.src = "assets/sprites/core-micro.png", A.src = "assets/sprites/core-small.png", v2.src = "assets/sprites/core-small-med.png", radius.src = "assets/sprites/core-medium.png", Q.src = "assets/sprites/core-xlarge.png", V.src = "assets/sprites/core-large.png", H.src = "assets/sprites/core-whale.png", overlay.src = "assets/sprites/tx-taxi.png", 
    object.src = "assets/sprites/spam.png", url.src = "assets/sprites/segwit.png", function() {
      let e = false;
      return t = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 
      4))) && (e = true), e;
      var t;
    }() && ($("input.overlay-switch")[0].checked = true, $(".sign").fadeToggle("slow", "linear")), window.AudioContext || window.webkitAudioContext) {
      let audioContextType = window.AudioContext || window.webkitAudioContext;
      audioContext = new audioContextType;
      gainNode = audioContext.createGain();
    } else {
      alert("Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version or downloading Google Chrome or Mozilla Firefox");
    }
    requestAudioFile("assets/audio/motorcycle-lowergain.mp3", "motorcycle");
    requestAudioFile("assets/audio/car-pass-lowergain.mp3", "car");
    requestAudioFile("assets/audio/diesel-pass.mp3", "diesel");
    requestAudioFile("assets/audio/semi-pass.mp3", "semi");
    requestAudioFile("assets/audio/mercy-6s.mp3", "mercy");
    requestAudioFile("assets/audio/ride-dirty-7s.mp3", "ride");
    requestAudioFile("assets/audio/lil-windex.mp3", "lilWindex");
    requestAudioFile("assets/audio/cha-ching.mp3", "cha-ching");
    requestAudioFile("assets/audio/la-cucaracha.mp3", "la-cucaracha");
    requestAudioFile("assets/audio/spam.mp3", "spam");
    requestAudioFile("assets/audio/allspam.mp3", "allspam");
    requestAudioFile("assets/audio/horns.mp3", "horns");
    requestAudioFile("assets/audio/evil-laugh.mp3", "laugh");
    requestAudioFile("assets/audio/bird-chirps.mp3", "birds");
    gainNode.gain.setTargetAtTime(z, audioContext.currentTime, .015);
    gainNode.connect(audioContext.destination);
  })();
}, function(canCreateDiscussions, d, n) {
  n.r(d);
  n(0);
}, function(module, canCreateDiscussions, factory) {
  factory(1);
  module.exports = factory(7);
}, , , , , function(canCreateDiscussions, isSlidingUp) {
}]);

